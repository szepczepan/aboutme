// Requires inline-block or block for proper styling
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

//============================================================
// Gradients
//============================================================

@mixin linear-gradient ($from, $to) {
  background-color: $from;
  background-image: -webkit-linear-gradient(top, $from, $to); /* Chrome 10-25, iOS 5+, Safari 5.1+ */
  background-image:         linear-gradient(to bottom, $from, $to); /* Chrome 26, Firefox 16+, IE 10+, Opera 12.10+ */
}


//============================================================
//
// Easing
//
// Thanks to Robert Penner for his sterling work on easing,
// and to Matthew Lein for converting these functions into
// approximated cubic-bezier functions. Respect.
//
// @see http://robertpenner.com/
// @see http://matthewlein.com/ceaser/
//
//============================================================

// Cubic
$easeInCubic     :  cubic-bezier(0.550, 0.055, 0.675, 0.190);
$easeOutCubic    :  cubic-bezier(0.215, 0.610, 0.355, 1.000);
$easeInOutCubic  :  cubic-bezier(0.645, 0.045, 0.355, 1.000);

// Circ
$easeInCirc      :  cubic-bezier(0.600, 0.040, 0.980, 0.335);
$easeOutCirc     :  cubic-bezier(0.075, 0.820, 0.165, 1.000);
$easeInOutCirc   :  cubic-bezier(0.785, 0.135, 0.150, 0.860);

// Expo
$easeInExpo      :  cubic-bezier(0.950, 0.050, 0.795, 0.035);
$easeOutExpo     :  cubic-bezier(0.190, 1.000, 0.220, 1.000);
$easeInOutExpo   :  cubic-bezier(1.000, 0.000, 0.000, 1.000);

// Quad
$easeInQuad      :  cubic-bezier(0.550, 0.085, 0.680, 0.530);
$easeOutQuad     :  cubic-bezier(0.250, 0.460, 0.450, 0.940);
$easeInOutQuad   :  cubic-bezier(0.455, 0.030, 0.515, 0.955);

// Quart
$easeInQuart     :  cubic-bezier(0.895, 0.030, 0.685, 0.220);
$easeOutQuart    :  cubic-bezier(0.165, 0.840, 0.440, 1.000);
$easeInOutQuart  :  cubic-bezier(0.770, 0.000, 0.175, 1.000);

// Quint
$easeInQuint     :  cubic-bezier(0.755, 0.050, 0.855, 0.060);
$easeOutQuint    :  cubic-bezier(0.230, 1.000, 0.320, 1.000);
$easeInOutQuint  :  cubic-bezier(0.860, 0.000, 0.070, 1.000);

// Sine
$easeInSine      :  cubic-bezier(0.470, 0.000, 0.745, 0.715);
$easeOutSine     :  cubic-bezier(0.390, 0.575, 0.565, 1.000);
$easeInOutSine   :  cubic-bezier(0.445, 0.050, 0.550, 0.950);

// Back
$easeInBack      :  cubic-bezier(0.600, -0.280, 0.735, 0.045);
$easeOutBack     :  cubic-bezier(0.175,  0.885, 0.320, 1.275);
$easeInOutBack   :  cubic-bezier(0.680, -0.550, 0.265, 1.550);


@mixin list-point-style() {
	ul:not(.accordion) {
		list-style: none;
		margin-left: 2rem;
		li {
			margin-bottom: .5rem;
			
			&::before {
			content: '\02713';
			color: $white;
			font-size: .9rem;
			font-weight: bold;
			text-align: center;
			// padding-top: 1px;
			line-height: 1.4;
			border-radius: 50%;
			background-color: $primary-color;
			margin-left: -2rem;
			height: 20px;
			width: 20px;
			display: inline-block;
			vertical-align: middle;
			margin-right: .5rem;
			}
		}
	}
}
@mixin cite($f-size) {
	color: darken($black, 10%);
	font-size: $f-size;
	font-weight: bold;
	position: relative;
	margin-left: 2.5rem;
	padding-top: 0;
	color: $primary-color;
	border-color: $primary-color;
	p {
		color: $primary-color;
	}
	&::before {
		content:"\201C";
		font-size: 2.5em;
		font-family: Georgia;
		position: absolute;
		top: 35%;
		left: -38px;
	}
}


/// Base path for assets (fonts, images...),
/// should not include trailing slash
/// @access public
/// @type String
$asset-base-path: '../' !default;

/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset
@function image($file) {
  @return asset('img', $file);
}

/// Font asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the font
/// @require {function} asset
@function font($file) {
  @return asset('fonts', $file);
}